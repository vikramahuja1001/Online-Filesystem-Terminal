(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'str' object has no attribute 'filename'"
p3
sS'layer'
p4
S'/home/vikram/web2py/applications/ITWS_Project/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*- \r\n\r\n#########################################################################\r\n## This is a samples controller\r\n## - index is the default action of any application\r\n## - user is required for authentication and authorization\r\n## - download is for downloading files uploaded in the db (does streaming)\r\n## - call exposes all registered services (none by default)\r\n#########################################################################  \r\nfrom __future__ import with_statement # This isn\'t required in Python 2.6     \r\n__metaclass__ = type\r\nimport os\r\nimport sys\r\nimport time\r\ntry:\r\n    from PIL import Image\r\nexcept ImportError:\r\n    raise HTTP(200,"Requires the Python Imaging Library installed")\r\nfrom gluon.contrib import simplejson as json\r\nimport urllib\r\nimport datetime\r\nnow=datetime.datetime.now()\r\nsplit_path = os.path.split\r\nsplit_ext = os.path.splitext\r\npath_exists = os.path.exists\r\nnormalize_path = os.path.normpath\r\nabsolute_path = os.path.abspath \r\nencode_urlpath = urllib.quote_plus\r\noutput=os.path.join(request.folder,\'static\',\'test.txt\')\r\n\r\n@auth.requires_login()\r\ndef welcome():\r\n\treturn locals()\r\n\r\n@auth.requires_login()\r\ndef home():\r\n\treturn locals()\r\n\r\n@auth.requires_login()\r\ndef terminal():\r\n\treturn locals()\r\n\r\ndef index():\r\n\treturn locals()\r\n\r\ndef filesystem():\r\n    appname=request.application\r\n    return dict(appname=appname)\r\n    \r\n@service.json\r\ndef getinfo(path):\r\n    if path==\'True\':\r\n        path=request.vars.path\r\n    else:\r\n        path=path\r\n    row=db((db.allfiles.filepath==path)&(db.allfiles.user==me)).select()[0]\r\n    abspath=request.folder+path\r\n    iconfolder=\'static/images/fileicons/\'\r\n    absiconlocation=request.folder+iconfolder\r\n    iconlocation=\'/\'+request.application+\'/\'+iconfolder\r\n    filename=row.filename\r\n    filetype=row.filetype\r\n    datecreated=row.datecreated\r\n    datemodified=row.datemodified\r\n    filesize=row.filesize\r\n    thefile = {\r\n            \'Filename\' : filename,\r\n            \'FileType\' : \'\',\r\n            \'Preview\' : iconlocation+\'_Open.png\' if filetype==\'dir\' else \'\' ,\r\n            \'FilePreview\':\'\',\r\n            \'Path\' : path,\r\n            \'Error\' : \'\',\r\n            \'Code\' : 0,\r\n            \'Properties\' : {\r\n                    \'Date Created\' : \'\',\r\n                    \'Date Modified\' : \'\',\r\n                    \'Width\' : \'\',\r\n                    \'Height\' : \'\',\r\n                    \'Size\' : \'\'\r\n             }\r\n            }\r\n            \r\n    imagetypes = set([\'gif\',\'jpg\',\'jpeg\',\'png\',\'bmp\'])      \r\n        \r\n    if filetype==\'dir\':\r\n        thefile[\'FileType\'] = \'Directory\'\r\n    else:\r\n        thefile[\'FileType\'] = filetype  \r\n        if filetype in imagetypes:\r\n            thefile[\'Preview\']=\'/\'+request.application+\'/default/download/\'+row.file\r\n        elif filetype=="mp3" or filetype=="flv":\r\n            thefile[\'FileType\']=\'media\'\r\n            embedfile=\'/\'+request.application+\'/default/download/\'+row.file          \r\n            thefile[\'FilePreview\']=str(plugin_mediaplayer(embedfile,400,300))\r\n            previewPath = iconlocation + filetype.lower() + \'.png\'\r\n            abspreviewPath=absiconlocation+filetype.lower()+\'.png\'\r\n            thefile[\'Preview\'] = previewPath if os.path.exists(abspreviewPath) else iconlocation+\'default.png\'\r\n        elif filetype=="mp4" or filetype=="mkv":\r\n            thefile[\'FileType\']=\'media\'\r\n            embedfile=\'/\'+request.application+\'/default/download/\'+row.file          \r\n            thefile[\'FilePreview\']=str(plugin_mediaplayer(embedfile,400,300))\r\n            previewPath = iconlocation + filetype.lower() + \'.png\'\r\n            abspreviewPath=absiconlocation+filetype.lower()+\'.png\'\r\n            thefile[\'Preview\'] = previewPath if os.path.exists(abspreviewPath) else iconlocation+\'default.png\'\r\n        else:\r\n            previewPath = iconlocation + filetype.lower() + \'.png\'\r\n            abspreviewPath=absiconlocation+filetype.lower()+\'.png\'\r\n            thefile[\'Preview\'] = previewPath if os.path.exists(abspreviewPath) else iconlocation+\'default.png\'\r\n        \r\n    thefile[\'Properties\'][\'Date Created\'] = datecreated \r\n    thefile[\'Properties\'][\'Date Modified\'] = datemodified\r\n    thefile[\'Properties\'][\'Size\'] = filesize\r\n    return thefile\r\n     \r\n@service.json   \r\ndef getdata():\r\n    path=request.vars.path\r\n    data=db((db.allfiles.filepath==path)&(db.allfiles.user==me)).select()[0]\r\n    textdata=data.content\r\n    return textdata\r\n\r\ndef updatedata():\r\n    data=request.vars.senddata\r\n    path=request.vars.getpath\r\n    db((db.allfiles.filepath==path)&(db.allfiles.user==me)).update(content=data)\r\n    return \'Updated!!!\'\r\n \r\n@service.json\r\ndef getfolder():   \r\n    path=request.vars.path\r\n    rows=db((db.allfiles.parentpath==path)&(db.allfiles.user==me)).select()    \r\n    result = {}\r\n    for row in rows:\r\n        result[row.filepath]=getinfo(row.filepath)\r\n    return result\r\n\r\ndef browsefiles():\r\n    files=db((db.allfiles.user==me)&(db.allfiles.filetype !=\'dir\')).select()\r\n    result={}\r\n    filetypes= set([\'gif\',\'jpg\',\'png\',\'bmp\',\'swf\'])\r\n    for rfile in files:\r\n        if rfile.filepath[-3:] in filetypes:\r\n            result[rfile.filepath]=getfileinfo(rfile.filepath)\r\n    return dict(result=result,cknum=request.vars.CKEditorFuncNum)\r\n    \r\ndef getfileinfo(path):\r\n    row=db((db.allfiles.filepath==path)&(db.allfiles.user==me)).select()[0]\r\n    abspath=request.folder+path\r\n    iconfolder=\'static/images/fileicons/\'\r\n    absiconlocation=request.folder+iconfolder\r\n    iconlocation=\'/\'+request.application+\'/\'+iconfolder\r\n    filename=row.filename\r\n    filetype=row.filetype\r\n    filesize=row.filesize\r\n    thefile = {\r\n            \'Filename\' : filename,\r\n            \'FileType\' : \'\',\r\n            \'Preview\' : iconlocation+\'_Open.png\' if filetype==\'dir\' else \'\' ,\r\n            \'FilePreview\':\'\',\r\n            \'Path\' : path,\r\n            \'Error\' : \'\',\r\n            \'Code\' : 0,\r\n            \'Properties\' : {\r\n                    \'Width\' : \'\',\r\n                    \'Height\' : \'\',\r\n                    \'Size\' : \'\'\r\n             }\r\n            }\r\n            \r\n    imagetypes = set([\'gif\',\'jpg\',\'jpeg\',\'png\',\'bmp\'])      \r\n        \r\n    if filetype==\'dir\':\r\n        thefile[\'FileType\'] = \'Directory\'\r\n    else:\r\n        thefile[\'FileType\'] = filetype  \r\n        if filetype in imagetypes:\r\n            thefile[\'Preview\']=\'/\'+request.application+\'/default/download/\'+row.file\r\n        elif filetype=="mp3" or filetype=="flv":\r\n            thefile[\'FileType\']=\'media\'\r\n            embedfile=\'/\'+request.application+\'/default/download/\'+row.file          \r\n            thefile[\'FilePreview\']=str(plugin_mediaplayer(embedfile,400,300))\r\n            previewPath = iconlocation + filetype.lower() + \'.png\'\r\n            abspreviewPath=absiconlocation+filetype.lower()+\'.png\'\r\n            thefile[\'Preview\'] = previewPath if os.path.exists(abspreviewPath) else iconlocation+\'default.png\'\r\n        else:\r\n            previewPath = iconlocation + filetype.lower() + \'.png\'\r\n            abspreviewPath=absiconlocation+filetype.lower()+\'.png\'\r\n            thefile[\'Preview\'] = previewPath if os.path.exists(abspreviewPath) else iconlocation+\'default.png\'        \r\n    thefile[\'Properties\'][\'Size\'] = filesize\r\n    return thefile\r\n\r\n\r\ndef dirlist():\r\n   import re\r\n   r=[\'<ul class="jqueryFileTree" style="display: none;">\']\r\n   path=request.post_vars.dir\r\n   rows=db((db.allfiles.parentpath==path)&(db.allfiles.user==me)).select()\r\n   if len(rows)==0 and path==\'/\':\r\n        Directories=[\'Documents\',\'Audios\',\'Videos\',\'Pictures\',\'Other\']\r\n        parentpath=\'/\'\r\n        for directory in Directories:\r\n            filename=directory\r\n            filepath=\'/\'+filename+\'/\'\r\n            db.allfiles.insert(filename=filename,filepath=filepath,parentpath=parentpath,filetype=\'dir\',datecreated=now,user=me)\r\n   rows=db((db.allfiles.parentpath==path)&(db.allfiles.user==me)).select()\r\n   for row in rows:\r\n       if row.filetype==\'dir\':\r\n          r.append(\'<li class="directory collapsed"><a href="#" rel="%s">%s</a></li>\' % (row.filepath,row.filename))    \r\n   r.append(\'</ul>\')\r\n   return r\r\n\r\n@service.json\r\ndef addfolder(param):    \r\n    filename=request.vars.name.replace(\' \',\'_\')\r\n    parentpath=request.vars.path\r\n    filepath=parentpath+filename+\'/\'\r\n    rows=db((db.allfiles.filepath==filepath)&(db.allfiles.user==me)).select()\r\n    recordexists=len(rows)\r\n    if not recordexists:\r\n        db.allfiles.insert(filename=filename,filepath=filepath,parentpath=parentpath,filetype=\'dir\',datecreated=now,user=me)\r\n        result= {\r\n                    \'Parent\' : parentpath,\r\n                    \'Name\' : filename,\r\n                    \'Error\' :\'\',\r\n                    \'Code\' :0\r\n                    }\r\n    else:\r\n        result = {\r\n                    \'Path\' : parentpath,\r\n                    \'Name\' : filename,\r\n                    \'Code\' : 1,\r\n                    \'Error\' : \'Folder already exists\'\r\n                }\r\n    return result\r\n    \r\n@service.json\r\ndef delete(param):\r\n    path=request.vars.path\r\n    #print "<--------------delete---------->"\r\n    #print "path:",path\r\n    filepaths=remove(path,pathset=[])\r\n    for filepath in filepaths:\r\n        if not filepath[-1]==\'/\':\r\n            row=db((db.allfiles.filepath==filepath )&(db.allfiles.user==me)).select()[0]\r\n            filename=row.file\r\n            os.remove(os.path.join(request.folder,\'uploads\',filename))\r\n        db((db.allfiles.filepath==filepath )&(db.allfiles.user==me)).delete()    \r\n    result={\r\n            \'Error\':\'No Error\',\r\n            \'Code\':0,\r\n            \'Path\': path \r\n           }        \r\n    return result\r\n     \r\n@service.json\r\ndef rename(param):\r\n    #print "<---------rename--------->"\r\n    oldpath=request.vars.old  \r\n    #print "oldpath:",oldpath      \r\n    #print "parentpath:",parentpath\r\n    newname = request.vars.new.replace(\' \',\'_\')    \r\n    result={\r\n            \'type\':\'\',\r\n            \'Old Path\':\'\',\r\n            \'New Path\':\'\',\r\n            \'Old Name\':\'\',\r\n            \'New eName\':\'\',\r\n            \'parent\':\'\',\r\n            \'Code\':0,\r\n            \'Error\':\'\'\r\n            } \r\n    if oldpath[-1]==\'/\':\r\n        oldname=split_path(oldpath[:-1])[-1]\r\n        parentpath=split_path(oldpath[:-1])[0]\r\n        if not parentpath==\'/\':\r\n            parentpath=parentpath+\'/\'\r\n        row=db((db.allfiles.parentpath==parentpath)&(db.allfiles.filetype==\'dir\') \\\r\n        &(db.allfiles.filename==newname)&(db.allfiles.user==me)).select()\r\n        if len(row)==1:\r\n            result[\'Code\']=1\r\n            result[\'Error\']=\'Folder already exists\'\r\n            return result\r\n        newpath=parentpath+newname+\'/\'\r\n        result[\'type\']=\'dir\'\r\n        db((db.allfiles.filepath==oldpath)&(db.allfiles.user==me)).update(filepath=newpath,filename=newname,datemodified=now)\r\n        renamedir(oldpath,oldname,newname)\r\n    else:   \r\n        oldname = split_path(oldpath)[-1]\r\n        parentpath = split_path(oldpath)[0]\r\n        if not parentpath==\'/\':\r\n            parentpath=parentpath+\'/\'        \r\n        newpath = parentpath + newname\r\n        row=db((db.allfiles.parentpath==parentpath)&(db.allfiles.filepath==newpath)&(db.allfiles.user==me)).select()\r\n        if len(row)==1:\r\n            result[\'Code\']=1\r\n            result[\'Error\']=\'File already exists\'\r\n            return result\r\n        result[\'type\']=\'file\'\r\n        db((db.allfiles.filepath==oldpath)&(db.allfiles.user==me)).update(filepath=newpath,filename=newname,datemodified=now)\r\n    result[\'parent\']=parentpath\r\n    result[\'Old Path\']= oldpath\r\n    result[\'Old Name\']=oldname\r\n    result[\'New Path\']=newpath\r\n    result[\'New eName\']=newname    \r\n    return result \r\n    \r\ndef renamedir(oldpath,oldname,newname):\r\n    newpath=oldpath.replace(oldname,newname)\r\n    rows=db((db.allfiles.parentpath==oldpath)&(db.allfiles.user==me)).select()\r\n    for row in rows:\r\n        if row.filepath[-1]==\'/\':\r\n            db((db.allfiles.parentpath==oldpath) \\\r\n            &(db.allfiles.user==me)).update(parentpath=row.parentpath.replace(oldname,newname),datemodified=now)\r\n            renamedir(row.filepath,oldname,newname)\r\n            db((db.allfiles.filepath==row.filepath) \\\r\n            &(db.allfiles.user==me)).update(filepath=row.filepath.replace(oldname,newname),datemodified=now)\r\n        else:\r\n            db((db.allfiles.filepath==row.filepath)&(db.allfiles.user==me)). \\\r\n            update(filepath=row.filepath.replace(oldname,newname),parentpath=row.parentpath.replace(oldname,newname),datemodified=now)\r\ndef user():\r\n    """\r\n    exposes:\r\n    http://..../[app]/default/user/login \r\n    http://..../[app]/default/user/logout\r\n    http://..../[app]/default/user/register\r\n    http://..../[app]/default/user/profile\r\n    http://..../[app]/default/user/retrieve_password\r\n    http://..../[app]/default/user/change_password\r\n    use @auth.requires_login()\r\n        @auth.requires_membership(\'group name\')\r\n        @auth.requires_permission(\'read\',\'table name\',record_id)\r\n    to decorate functions that need access control\r\n    """\r\n    return dict(form=auth())\r\n\r\n\r\ndef add():   \r\n    parentpath=request.vars.currentpath\r\n    file=request.vars.file\r\n    filename=file.filename.replace(\' \',\'_\')\r\n    \r\n    filepath=parentpath+filename\r\n    filetype=os.path.splitext(filename)[1][1:]\r\n    row=db((db.allfiles.parentpath==parentpath)&(db.allfiles.filepath==filepath)&(db.allfiles.filename==filename) \\\r\n    &(db.allfiles.user==me)).select()\r\n    if not len(row):    \r\n        db.allfiles.insert(filename=filename,filepath=filepath, \\\r\n            parentpath=parentpath,filetype=filetype,file=db.allfiles.file.store(file.file,filename),datecreated=now,user=me)   \r\n        result = {\r\n                \'Path\' : parentpath,\r\n                \'Name\' : filename,\r\n                \'Error\' :\'\',\r\n                \'Code\':0\r\n            }\r\n    else:\r\n        result = {\r\n                \'Path\' : parentpath,\r\n                \'Name\' : filename,\r\n                \'Error\' : \'File already exists\',\r\n                \'Code\':1\r\n            }\r\n        return \'<textarea>\'+str(result)+\'</textarea>\'\r\n    row=db((db.allfiles.filename==filename)&(db.allfiles.user==me)).select()[0]\r\n    insertedfile=row.file\r\n    outfile=open(output,\'wb\')\r\n    try:\r\n        filepath=os.path.join(request.folder,\'uploads\',insertedfile)\r\n        filesize=os.path.getsize(filepath)\r\n        if filepath[-3:]==\'txt\' or filepath[-4:]==\'html\':\r\n            filepath=os.path.normpath(filepath)\r\n            filein=open(filepath,\'r\')\r\n            dbcontent=filein.read()\r\n            filein.close()\r\n            db((db.allfiles.filename==filename)&(db.allfiles.user==me)).update(filesize=filesize,content=dbcontent)\r\n        else:\r\n            db((db.allfiles.filename==filename)&(db.allfiles.user==me)).update(filesize=filesize)\r\n        outfile.close()        \r\n    except:\r\n        outfile.write(str(sys.exc_info()[1]))\r\n        outfile.close()   \r\n    return \'<textarea>\'+str(result)+\'</textarea>\'\r\n\r\ndef downloadurl():\r\n    """\r\n    allows downloading of uploaded files\r\n    http://..../[app]/default/download/[filename]\r\n    """\r\n    filename=request.vars.filename\r\n    file=db((db.allfiles.filename==filename)&(db.allfiles.user==me)).select()[0]   \r\n    return file.file\r\n\r\ndef download():\r\n    return response.download(request,db)\r\n\r\ndef call():\r\n    """\r\n    exposes services. for example:\r\n    http://..../[app]/default/call/jsonrpc\r\n    decorate with @services.jsonrpc the functions to expose\r\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\r\n    """\r\n    session.forget()\r\n    return service()\r\n\r\n\r\ndef remove(path,pathset):\r\n    if path[-1]==\'/\':\r\n        pathset.append(path)\r\n        rows=db((db.allfiles.parentpath==path)&(db.allfiles.user==me)).select()\r\n        for row in rows:\r\n            if row.filetype==\'dir\':\r\n                remove(row.filepath,pathset=pathset)\r\n            else:\r\n                pathset.append(row.filepath)\r\n    else:\r\n        pathset.append(path)\r\n    return pathset\r\n\nresponse._vars=response._caller(add)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/vikram/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/vikram/web2py/applications/ITWS_Project/controllers/default.py", line 419, in <module>\n  File "/home/vikram/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/vikram/web2py/applications/ITWS_Project/controllers/default.py", line 340, in add\n    filename=file.filename.replace(\' \',\'_\')\nAttributeError: \'str\' object has no attribute \'filename\'\n'
p11
s.